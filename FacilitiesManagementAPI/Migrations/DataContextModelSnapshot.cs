// <auto-generated />
using System;
using FacilitiesManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FacilitiesManagementAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("ContractorPremises", b =>
                {
                    b.Property<Guid>("ContractorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PremisesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContractorsId", "PremisesId");

                    b.HasIndex("PremisesId");

                    b.ToTable("ContractorPremises");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Accountant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PremisesId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PremisesId")
                        .IsUnique();

                    b.ToTable("Accountant");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContractorTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GreenLightEnum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.ContractorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContractorTypes");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoteContent")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PremisesId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("PremisesId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Premises", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("TEXT");

                    b.Property<string>("PremiseName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PremiseNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.PremisesAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PremisesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PremisesId")
                        .IsUnique();

                    b.ToTable("PremisesAddress");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.PremisesTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PremisesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("PremisesId");

                    b.ToTable("PremisesTask");
                });

            modelBuilder.Entity("ContractorPremises", b =>
                {
                    b.HasOne("FacilitiesManagementAPI.Entities.Contractor", null)
                        .WithMany()
                        .HasForeignKey("ContractorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacilitiesManagementAPI.Entities.Premises", null)
                        .WithMany()
                        .HasForeignKey("PremisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Accountant", b =>
                {
                    b.HasOne("FacilitiesManagementAPI.Entities.Premises", "Premises")
                        .WithOne("Accountant")
                        .HasForeignKey("FacilitiesManagementAPI.Entities.Accountant", "PremisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premises");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Note", b =>
                {
                    b.HasOne("FacilitiesManagementAPI.Entities.Contractor", null)
                        .WithMany("Notes")
                        .HasForeignKey("ContractorId");

                    b.HasOne("FacilitiesManagementAPI.Entities.Premises", null)
                        .WithMany("Notes")
                        .HasForeignKey("PremisesId");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.PremisesAddress", b =>
                {
                    b.HasOne("FacilitiesManagementAPI.Entities.Premises", "Premises")
                        .WithOne("PremisesAddress")
                        .HasForeignKey("FacilitiesManagementAPI.Entities.PremisesAddress", "PremisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premises");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.PremisesTask", b =>
                {
                    b.HasOne("FacilitiesManagementAPI.Entities.Contractor", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ContractorId");

                    b.HasOne("FacilitiesManagementAPI.Entities.Premises", "Premises")
                        .WithMany("PremisesTasks")
                        .HasForeignKey("PremisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premises");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Contractor", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("FacilitiesManagementAPI.Entities.Premises", b =>
                {
                    b.Navigation("Accountant");

                    b.Navigation("Notes");

                    b.Navigation("PremisesAddress");

                    b.Navigation("PremisesTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
